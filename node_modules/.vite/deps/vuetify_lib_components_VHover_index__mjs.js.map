{
  "version": 3,
  "sources": ["../../vuetify/src/composables/delay.ts", "../../vuetify/src/components/VHover/VHover.tsx"],
  "sourcesContent": ["// Utilities\nimport { IN_BROWSER, propsFactory } from '@/util'\n\n// Types\nexport interface DelayProps {\n  closeDelay?: number | string\n  openDelay?: number | string\n}\n\n// Composables\nexport const makeDelayProps = propsFactory({\n  closeDelay: [Number, String],\n  openDelay: [Number, String],\n}, 'delay')\n\nexport function useDelay (props: DelayProps, cb?: (value: boolean) => void) {\n  const delays: Partial<Record<keyof DelayProps, number>> = {}\n  const runDelayFactory = (prop: keyof DelayProps) => (): Promise<boolean> => {\n    // istanbul ignore next\n    if (!IN_BROWSER) return Promise.resolve(true)\n\n    const active = prop === 'openDelay'\n\n    delays.closeDelay && window.clearTimeout(delays.closeDelay)\n    delete delays.closeDelay\n\n    delays.openDelay && window.clearTimeout(delays.openDelay)\n    delete delays.openDelay\n\n    return new Promise(resolve => {\n      const delay = parseInt(props[prop] ?? 0, 10)\n\n      delays[prop] = window.setTimeout(() => {\n        cb?.(active)\n        resolve(active)\n      }, delay)\n    })\n  }\n\n  return {\n    runCloseDelay: runDelayFactory('closeDelay'),\n    runOpenDelay: runDelayFactory('openDelay'),\n  }\n}\n", "// Composables\nimport { makeDelayProps, useDelay } from '@/composables/delay'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { defineComponent } from '@/util'\n\nexport const VHover = defineComponent({\n  name: 'VHover',\n\n  props: {\n    disabled: Boolean,\n    modelValue: {\n      type: Boolean,\n      default: undefined,\n    },\n\n    ...makeDelayProps(),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isHovering = useProxiedModel(props, 'modelValue')\n    const { runOpenDelay, runCloseDelay } = useDelay(props, value => !props.disabled && (isHovering.value = value))\n\n    return () => slots.default?.({\n      isHovering: isHovering.value,\n      props: {\n        onMouseenter: runOpenDelay,\n        onMouseleave: runCloseDelay,\n      },\n    })\n  },\n})\n\nexport type VHover = InstanceType<typeof VHover>\n"],
  "mappings": ";;;;;;;;;;;;AAUO,IAAMA,iBAAiBC,aAAa;EACzCC,YAAY,CAACC,QAAQC,MAAM;EAC3BC,WAAW,CAACF,QAAQC,MAAM;AAC5B,GAAG,OAAO;AAEH,SAASE,SAAUC,OAAmBC,IAA+B;AAC1E,QAAMC,SAAoD,CAAC;AAC3D,QAAMC,kBAAmBC,UAA2B,MAAwB;AAE1E,QAAI,CAACC;AAAY,aAAOC,QAAQC,QAAQ,IAAI;AAE5C,UAAMC,SAASJ,SAAS;AAExBF,WAAOP,cAAcc,OAAOC,aAAaR,OAAOP,UAAU;AAC1D,WAAOO,OAAOP;AAEdO,WAAOJ,aAAaW,OAAOC,aAAaR,OAAOJ,SAAS;AACxD,WAAOI,OAAOJ;AAEd,WAAO,IAAIQ,QAAQC,aAAW;AAC5B,YAAMI,QAAQC,SAASZ,MAAMI,IAAI,KAAK,GAAG,EAAE;AAE3CF,aAAOE,IAAI,IAAIK,OAAOI,WAAW,MAAM;AACrCZ,cAAE,OAAA,SAAFA,GAAKO,MAAM;AACXD,gBAAQC,MAAM;MAChB,GAAGG,KAAK;IACV,CAAC;EACH;AAEA,SAAO;IACLG,eAAeX,gBAAgB,YAAY;IAC3CY,cAAcZ,gBAAgB,WAAW;EAC3C;AACF;;;ACpCO,IAAMa,SAASC,gBAAgB;EACpCC,MAAM;EAENC,OAAO;IACLC,UAAUC;IACVC,YAAY;MACVC,MAAMF;MACNG,SAASC;IACX;IAEA,GAAGC,eAAc;EACnB;EAEAC,OAAO;IACL,qBAAsBC,WAAmB;EAC3C;EAEAC,MAAOV,OAAK,MAAa;AAAA,QAAX;MAAEW;IAAM,IAAC;AACrB,UAAMC,aAAaC,gBAAgBb,OAAO,YAAY;AACtD,UAAM;MAAEc;MAAcC;IAAc,IAAIC,SAAShB,OAAOS,WAAS,CAACT,MAAMC,aAAaW,WAAWH,QAAQA,MAAM;AAE9G,WAAO,MAAA;AAAA,UAAA;AAAA,cAAA,iBAAME,MAAMN,YAAO,OAAA,SAAb,eAAA,KAAAM,OAAgB;QAC3BC,YAAYA,WAAWH;QACvBT,OAAO;UACLiB,cAAcH;UACdI,cAAcH;QAChB;MACF,CAAC;IAAC;EACJ;AACF,CAAC;",
  "names": ["makeDelayProps", "propsFactory", "closeDelay", "Number", "String", "openDelay", "useDelay", "props", "cb", "delays", "runDelayFactory", "prop", "IN_BROWSER", "Promise", "resolve", "active", "window", "clearTimeout", "delay", "parseInt", "setTimeout", "runCloseDelay", "runOpenDelay", "VHover", "defineComponent", "name", "props", "disabled", "Boolean", "modelValue", "type", "default", "undefined", "makeDelayProps", "emits", "value", "setup", "slots", "isHovering", "useProxiedModel", "runOpenDelay", "runCloseDelay", "useDelay", "onMouseenter", "onMouseleave"]
}
